// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract LotterySystem{

  address public owner;
  address payable[] public Participants;

  constructor(){
    owner = msg.sender;
  }


function Participants_List() public view returns (address payable[] memory){ 
    return Participants;
  }
function checkIfAlreadyExist() view private returns(bool){
    for(uint i=0;i<Participants.length;i++){
      if(Participants[i]==msg.sender)
        return true;
    }
    return false;
  }

function Participate() payable public{
    require(msg.sender != owner, "Owner cannot participate"); 
    require(checkIfAlreadyExist() == false, "Player already entered");
    require(msg.value >= 1 ether, "Minimum amount must be payed");
    Participants.push(payable(msg.sender));
  }

function winnergenerator() view private returns(uint){
    return uint(sha256(abi.encodePacked(block.basefee, block.number, Participants)));
}

function Announce_Winner() public{
    require(msg.sender == owner, "Only Owner can pick the winner");
    uint index = winnergenerator()%Participants.length;//winner index
    address contractAddress = address(this);
    Participants[index].transfer(contractAddress.balance);
    Participants = new address payable[](0);
  }


}
